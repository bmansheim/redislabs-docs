<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Monitoring with metrics and alerts on Redis Documentation Center</title><link>/rs/clusters/monitoring/</link><description>Recent content in Monitoring with metrics and alerts on Redis Documentation Center</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/rs/clusters/monitoring/index.xml" rel="self" type="application/rss+xml"/><item><title>Metrics in the admin console</title><link>/rs/clusters/monitoring/console-metrics-definitions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rs/clusters/monitoring/console-metrics-definitions/</guid><description>The Redis Enterprise Software admin console shows performance metrics for clusters, nodes, databases, and shards.
Standard metrics Metric Components measured Description More information Connections Cluster, Node, Database Number of connections used to access the database CPU usage Cluster, Node Percent usage of the CPU Evicted objects/sec1 Database, Shard Number of objects evicted per second Objects are evicted if:
The database reaches its memory_limitThe eviction policy is not configured to no-evictionThe dataset keys are compliant with the selected eviction policy.</description></item><item><title>Prometheus integration with Redis Enterprise Software</title><link>/rs/clusters/monitoring/prometheus-integration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rs/clusters/monitoring/prometheus-integration/</guid><description>To collect and display metrics data from your databases and other cluster components, you can connect your Prometheus or Grafana server to your Redis Enterprise Software cluster. Metrics are exposed at the node, database, shard and proxy levels.
Prometheus is an open-source systems monitoring and alerting toolkit that can scrape metrics from different sources. Grafana is an open-source, feature-rich metrics dashboard and graph editor that can process Prometheus data. You can use Prometheus and Grafana to:</description></item><item><title>Metrics in Prometheus</title><link>/rs/clusters/monitoring/prometheus-metrics-definitions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rs/clusters/monitoring/prometheus-metrics-definitions/</guid><description>The integration with Prometheus lets you create dashboards that highlight the metrics that are important to you.
Here are the metrics available to Prometheus:
Database metrics Metric Description bdb_avg_latency Average latency of operations on the DB (seconds); returned only when there is traffic bdb_avg_latency_max Highest value of average latency of operations on the DB (seconds); returned only when there is traffic bdb_avg_read_latency Average latency of read operations (seconds); returned only when there is traffic bdb_avg_read_latency_max Highest value of average latency of read operations (seconds); returned only when there is traffic bdb_avg_write_latency Average latency of write operations (seconds); returned only when there is traffic bdb_avg_write_latency_max Highest value of average latency of write operations (seconds); returned only when there is traffic bdb_conns Number of client connections to DB bdb_egress_bytes Rate of outgoing network traffic from the DB (bytes/sec) bdb_egress_bytes_max Highest value of rate of outgoing network traffic from the DB (bytes/sec) bdb_evicted_objects Rate of key evictions from DB (evictions/sec) bdb_evicted_objects_max Highest value of rate of key evictions from DB (evictions/sec) bdb_expired_objects Rate keys expired in DB (expirations/sec) bdb_expired_objects_max Highest value of rate keys expired in DB (expirations/sec) bdb_fork_cpu_system % cores utilization in system mode for all redis shard fork child processes of this database bdb_fork_cpu_system_max Highest value of % cores utilization in system mode for all redis shard fork child processes of this database bdb_fork_cpu_user % cores utilization in user mode for all redis shard fork child processes of this database bdb_fork_cpu_user_max Highest value of % cores utilization in user mode for all redis shard fork child processes of this database bdb_ingress_bytes Rate of incoming network traffic to DB (bytes/sec) bdb_ingress_bytes_max Highest value of rate of incoming network traffic to DB (bytes/sec) bdb_instantaneous_ops_per_sec Request rate handled by all shards of DB (ops/sec) bdb_main_thread_cpu_system % cores utilization in system mode for all redis shard main threas of this database bdb_main_thread_cpu_system_max Highest value of % cores utilization in system mode for all redis shard main threas of this database bdb_main_thread_cpu_user % cores utilization in user mode for all redis shard main threads of this database bdb_main_thread_cpu_user_max Highest value of % cores utilization in user mode for all redis shard main threads of this database bdb_mem_frag_ratio RAM fragmentation ratio (RSS / allocated RAM) bdb_mem_size_lua Redis lua scripting heap size (bytes) bdb_memory_limit Configured RAM limit for the database bdb_monitor_sessions_count Number of client connected in monitor mode to the DB bdb_no_of_keys Number of keys in DB bdb_other_req Rate of other (non read/write) requests on DB (ops/sec) bdb_other_req_max Highest value of rate of other (non read/write) requests on DB (ops/sec) bdb_other_res Rate of other (non read/write) responses on DB (ops/sec) bdb_other_res_max Highest value of rate of other (non read/write) responses on DB (ops/sec) bdb_pubsub_channels Count the pub/sub channels with subscribed clients bdb_pubsub_channels_max Highest value of count the pub/sub channels with subscribed clients bdb_pubsub_patterns Count the pub/sub patterns with subscribed clients bdb_pubsub_patterns_max Highest value of count the pub/sub patterns with subscribed clients bdb_read_hits Rate of read operations accessing an existing key (ops/sec) bdb_read_hits_max Highest value of rate of read operations accessing an existing key (ops/sec) bdb_read_misses Rate of read operations accessing a non-existing key (ops/sec) bdb_read_misses_max Highest value of rate of read operations accessing a non-existing key (ops/sec) bdb_read_req Rate of read requests on DB (ops/sec) bdb_read_req_max Highest value of rate of read requests on DB (ops/sec) bdb_read_res Rate of read responses on DB (ops/sec) bdb_read_res_max Highest value of rate of read responses on DB (ops/sec) bdb_shard_cpu_system % cores utilization in system mode for all redis shard processes of this database bdb_shard_cpu_system_max Highest value of % cores utilization in system mode for all redis shard processes of this database bdb_shard_cpu_user % cores utilization in user mode for the redis shard process bdb_shard_cpu_user_max Highest value of % cores utilization in user mode for the redis shard process bdb_total_connections_received Rate of new client connections to DB (connections/sec) bdb_total_connections_received_max Highest value of rate of new client connections to DB (connections/sec) bdb_total_req Rate of all requests on DB (ops/sec) bdb_total_req_max Highest value of rate of all requests on DB (ops/sec) bdb_total_res Rate of all responses on DB (ops/sec) bdb_total_res_max Highest value of rate of all responses on DB (ops/sec) bdb_up Database is up and running bdb_used_memory Memory used by db (in bigredis this includes flash) (bytes) bdb_write_hits Rate of write operations accessing an existing key (ops/sec) bdb_write_hits_max Highest value of rate of write operations accessing an existing key (ops/sec) bdb_write_misses Rate of write operations accessing a non-existing key (ops/sec) bdb_write_misses_max Highest value of rate of write operations accessing a non-existing key (ops/sec) bdb_write_req Rate of write requests on DB (ops/sec) bdb_write_req_max Highest value of rate of write requests on DB (ops/sec) bdb_write_res Rate of write responses on DB (ops/sec) bdb_write_res_max Highest value of rate of write responses on DB (ops/sec) no_of_expires Current number of volatile keys in the database Node metrics Metric Description node_available_flash Available flash in node (bytes) node_available_flash_no_overbooking Available flash in node (bytes), without taking into account overbooking node_available_memory Amount of free memory in node (bytes) that is available for database provisioning node_available_memory_no_overbooking Available ram in node (bytes) without taking into account overbooking node_avg_latency Average latency of requests handled by endpoints on node (seconds); returned only when there is traffic node_bigstore_free Sum of free space of back-end flash (used by flash DB&amp;rsquo;s [BigRedis]) on all cluster nodes (bytes); returned only when BigRedis is enabled node_bigstore_iops Rate of i/o operations against back-end flash for all shards which are part of a flash based DB (BigRedis) in cluster (ops/sec); returned only when BigRedis is enabled node_bigstore_kv_ops Rate of value read/write operations against back-end flash for all shards which are part of a flash based DB (BigRedis) in cluster (ops/sec); returned only when BigRedis is enabled node_bigstore_throughput Throughput i/o operations against back-end flash for all shards which are part of a flash based DB (BigRedis) in cluster (bytes/sec); returned only when BigRedis is enabled node_conns Number of clients connected to endpoints on node node_cpu_idle CPU idle time portion (0-1, multiply by 100 to get percent) node_cpu_idle_max Highest value of CPU idle time portion (0-1, multiply by 100 to get percent) node_cpu_idle_median Average value of CPU idle time portion (0-1, multiply by 100 to get percent) node_cpu_idle_min Lowest value of CPU idle time portion (0-1, multiply by 100 to get percent) node_cpu_system CPU time portion spent in kernel (0-1, multiply by 100 to get percent) node_cpu_system_max Highest value of CPU time portion spent in kernel (0-1, multiply by 100 to get percent) node_cpu_system_median Average value of CPU time portion spent in kernel (0-1, multiply by 100 to get percent) node_cpu_system_min Lowest value of CPU time portion spent in kernel (0-1, multiply by 100 to get percent) node_cpu_user CPU time portion spent by users-pace processes (0-1, multiply by 100 to get percent) node_cpu_user_max Highest value of CPU time portion spent by users-pace processes (0-1, multiply by 100 to get percent) node_cpu_user_median Average value of CPU time portion spent by users-pace processes (0-1, multiply by 100 to get percent) node_cpu_user_min Lowest value of CPU time portion spent by users-pace processes (0-1, multiply by 100 to get percent) node_cur_aof_rewrites Number of aof rewrites that are currently performed by shards on this node node_egress_bytes Rate of outgoing network traffic to node (bytes/sec) node_egress_bytes_max Highest value of rate of outgoing network traffic to node (bytes/sec) node_egress_bytes_median Average value of rate of outgoing network traffic to node (bytes/sec) node_egress_bytes_min Lowest value of rate of outgoing network traffic to node (bytes/sec) node_ephemeral_storage_avail Disk space available to RLEC processes on configured ephemeral disk (bytes) node_ephemeral_storage_free Free disk space on configured ephemeral disk (bytes) node_free_memory Free memory in node (bytes) node_ingress_bytes Rate of incoming network traffic to node (bytes/sec) node_ingress_bytes_max Highest value of rate of incoming network traffic to node (bytes/sec) node_ingress_bytes_median Average value of rate of incoming network traffic to node (bytes/sec) node_ingress_bytes_min Lowest value of rate of incoming network traffic to node (bytes/sec) node_persistent_storage_avail Disk space available to RLEC processes on configured persistent disk (bytes) node_persistent_storage_free Free disk space on configured persistent disk (bytes) node_provisional_flash Amount of flash available for new shards on this node, taking into account overbooking, max redis servers, reserved flash and provision and migration thresholds (bytes) node_provisional_flash_no_overbooking Amount of flash available for new shards on this node, without taking into account overbooking, max redis servers, reserved flash and provision and migration thresholds (bytes) node_provisional_memory Amount of RAM that is available for provisioning to databases out of the total RAM allocated for databases node_provisional_memory_no_overbooking Amount of RAM that is available for provisioning to databases out of the total RAM allocated for databases, without taking into account overbooking node_total_req Request rate handled by endpoints on node (ops/sec) node_up Node is part of the cluster and is connected Proxy metrics Metric Description listener_acc_latency Accumulative latency (sum of the latencies) of all types of commands on DB.</description></item><item><title>Uptrace integration with Redis Enterprise Software</title><link>/rs/clusters/monitoring/uptrace-integration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rs/clusters/monitoring/uptrace-integration/</guid><description>To collect, display, and monitor metrics data from your databases and other cluster components, you can connect Uptrace to your Redis Enterprise cluster using OpenTelemetry Collector.
Uptrace is an open source application performance monitoring (APM) tool that supports distributed tracing, metrics, and logs. You can use it to monitor applications and set up automatic alerts to receive notifications.
With OpenTelemetry Collector, you can receive, process, and export telemetry data to any monitoring tool.</description></item><item><title>Nagios integration with Redis Enterprise Software</title><link>/rs/clusters/monitoring/nagios-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rs/clusters/monitoring/nagios-plugin/</guid><description>The Redis Enterprise Software (RS) Nagios plugin enables you to monitor the status of RS related objects and alerts. The RS alerts can be related to the cluster, nodes, or databases.
The alerts that can be monitored via Nagios are the same alerts that can be configured in the RS UI in the Settings ­&amp;gt; Alerts page, or the specific Database ­&amp;gt; Configuration page.
All alert configurations (active / not active, setting thresholds, etc&amp;rsquo;) can only be done through the RS UI, they cannot be configured in Nagios.</description></item></channel></rss>