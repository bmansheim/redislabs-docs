<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Security on Redis Documentation Center</title><link>/kubernetes/security/</link><description>Recent content in Security on Redis Documentation Center</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/kubernetes/security/index.xml" rel="self" type="application/rss+xml"/><item><title>Manage Redis Enterprise cluster (REC) credentials</title><link>/kubernetes/security/manage-rec-credentials/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/kubernetes/security/manage-rec-credentials/</guid><description>Redis Enterprise for Kubernetes uses a custom resource called RedisEnterpriseCluster to create a Redis Enterprise cluster (REC). During creation it generates random credentials for the operator to use. The credentials are saved in a Kubernetes (K8s) secret. The secret name defaults to the name of the cluster.
Note: This procedure is only supported for operator versions 6.0.20-12 and above. Retrieve the current username and password The credentials can be used to access the Redis Enterprise admin console or the API.</description></item><item><title>Manage Redis Enterprise cluster (REC) certificates</title><link>/kubernetes/security/manage-rec-certificates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/kubernetes/security/manage-rec-certificates/</guid><description>By default, Redis Enterprise Software for Kubernetes generates TLS certificates for the cluster during creation. These self-signed certificates are generated on the first node of each Redis Enterprise cluster (REC) and are copied to all other nodes added to the cluster. For the list of of certificates used by Redis Enterprise Software and the traffic they encrypt, see the certificates table.
To install and use your own certificates with Kubernetes on your Redis Enterprise cluster, they need to be stored in secrets.</description></item><item><title>Add client certificates</title><link>/kubernetes/security/add-client-certificates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/kubernetes/security/add-client-certificates/</guid><description>For each client certificate you want to use with your database, you need to create a Kubernetes secret to hold it. You can then reference that secret in your Redis Enterprise database (REDB) custom resource spec.
Create a secret to hold the new certificate Create the secret config file with the required fields shown below.
apiVersion: v1 kind: Secret type: Opaque metadata: name: &amp;lt;client-cert-secret&amp;gt; namespace: &amp;lt;your-rec-namespace&amp;gt; data: cert: &amp;lt;client-certificate&amp;gt; Apply the file to create the secret resource.</description></item><item><title>Enable internode encryption</title><link>/kubernetes/security/internode-encryption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/kubernetes/security/internode-encryption/</guid><description>Internode encryption provides added security by encrypting communication between nodes in your Redis Enterprise cluster (REC).
Enable internode encryption in the spec section of your REC custom resource file.
spec: dataInternodeEncryption: true This change will apply to all databases created in the REC. You can override the cluster-wide setting for individual databases.
Edit your Redis Enterprise database (REDB) custom resource file to disable internode encryption for only that database.
spec: dataInternodeEncryption: false To learn more about internode encryption, see Internode encryption for Redis Enterprise Software.</description></item></channel></rss>