<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Active-Active geo-distributed Redis on Redis Documentation Center</title><link>/rs/databases/active-active/</link><description>Recent content in Active-Active geo-distributed Redis on Redis Documentation Center</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/rs/databases/active-active/index.xml" rel="self" type="application/rss+xml"/><item><title>Get started with Redis Enterprise Active-Active databases</title><link>/rs/databases/active-active/get-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rs/databases/active-active/get-started/</guid><description>To get you started, this article will help you set up a Active-Active database, formerly known as CRDB (conflict-free replicated database) spanning across two Redis Enterprise Software clusters for test and development environments. Here are the steps:
Step 1: Run two Redis Enterprise Software (RS) Docker containers Step 2: Set up each container as a cluster Step 3: Create a new Redis Enterprise Active-Active database Step 4: Test connectivity to the Active-Active database To run an Active-Active database on installations from the RS download package, set up two RS installations and continue from Step 2.</description></item><item><title>Considerations for planning Active-Active databases</title><link>/rs/databases/active-active/planning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rs/databases/active-active/planning/</guid><description>In Redis Enterprise, Active-Active geo-distribution is based on conflict-free replicated data type (CRDT) technology. Compared to databases without geo-distribution, Active-Active databases have more complex replication and networking, as well as a different data type.
Because of the complexities of Active-Active databases, there are special considerations to keep in mind while planning your Active-Active database.
See Active-Active Redis for more information about geo-distributed replication. For more info on other high availability features, see Durability and high availability.</description></item><item><title>Create an Active-Active geo-replicated database</title><link>/rs/databases/active-active/create/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rs/databases/active-active/create/</guid><description>Active-Active geo-replicated databases (formerly known as CRDBs) give applications write access to replicas of the dataset in different geographical locations.
The participating Redis Enterprise Software clusters that host the instances can be in distributed geographic locations. Every instance of an Active-Active database can receive write operations, and all operations are synchronized to all of the instances without conflict.
Steps to create an Active-Active database Create a service account - On each participating cluster, create a dedicated user account with the Admin role.</description></item><item><title>Connect to your Active-Active databases</title><link>/rs/databases/active-active/connect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rs/databases/active-active/connect/</guid><description>With the Redis database created, you are ready to connect to your database to store data. You can use one of the following ways to test connectivity to your database:
Connect with redis-cli, the built-in command-line tool Connect with a Hello World application written in Python Remember we have two member Active-Active databases that are available for connections and concurrent reads and writes. The member Active-Active databases are using bi-directional replication to for the global Active-Active database.</description></item><item><title>Manage Active-Active databases</title><link>/rs/databases/active-active/manage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rs/databases/active-active/manage/</guid><description>You can configure and manage your Active-Active database from either the admin console or the command line.
To change the global configuration of the Active-Active database, use the crdb-cli.
If you need to apply changes locally to one database instance, you use the admin console or the rladmin CLI.
Database settings The following table shows a list of database settings, tools you can use to change those settings, and links to more information.</description></item><item><title>Delete Active-Active databases</title><link>/rs/databases/active-active/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rs/databases/active-active/delete/</guid><description>When you delete an Active-Active database (formerly known as CRDB), all instances of the Active-Active database are deleted from all participating clusters.
Warning - This action is immediate, non-reversible, and has no rollback. Because Active-Active databases are made up of instances on multiple participating clusters, to restore a deleted Active-Active database you must create the database again with all of its instances and then restore the data to the database from backup.</description></item><item><title>Enable causal consistency</title><link>/rs/databases/active-active/causal-consistency/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rs/databases/active-active/causal-consistency/</guid><description>When you enable causal consistency in Active-Active databases, the order of operations on a specific key are maintained across all Active-Active database instances.
For example, if operations A and B were applied on the same key and the effect of A was observed by the instance that initiated B before B was applied to the key. All instances of an Active-Active databases would then observe the effect of A before observing the effect of B.</description></item><item><title>Configure distributed synchronization</title><link>/rs/databases/active-active/synchronization-mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rs/databases/active-active/synchronization-mode/</guid><description>Replicated databases, such as Replica Of and Active-Active databases, use proxy endpoints to synchronize database changes with the databases on other participating clusters.
To improve the throughput and lower the latency for synchronization traffic, you can configure a replicated database to use distributed synchronization where any available proxy endpoint can manage synchronization traffic.
Every database by default has one proxy endpoint that manages client and synchronization communication with the database shards, and that proxy endpoint is used for database synchronization.</description></item><item><title>Syncer process</title><link>/rs/databases/active-active/syncer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rs/databases/active-active/syncer/</guid><description>Syncer process Each node in a cluster containing an instance of an Active-Active database hosts a process called the syncer. The syncer process:
Connects to the proxy on another participating cluster Reads data from that database instance Writes the data to the local cluster&amp;rsquo;s primary(master) shard Some replication capabilities are also included in open source redis.
The primary (also known as master) shard at the top of the primary-replica tree creates a replication ID.</description></item></channel></rss>