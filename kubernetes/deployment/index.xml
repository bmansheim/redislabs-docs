<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Deployment on Redis Documentation Center</title><link>/kubernetes/deployment/</link><description>Recent content in Deployment on Redis Documentation Center</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/kubernetes/deployment/index.xml" rel="self" type="application/rss+xml"/><item><title>Deploy Redis Enterprise Software for Kubernetes</title><link>/kubernetes/deployment/quick-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/kubernetes/deployment/quick-start/</guid><description>To deploy Redis Enterprise Software for Kubernetes and start your Redis Enterprise cluster (REC), you need to do the following:
Create a new namespace in your Kubernetes cluster. Download the operator bundle. Apply the operator bundle and verify it&amp;rsquo;s running. Create a Redis Enterprise cluster (REC). This guide works with most supported Kubernetes distributions. If you&amp;rsquo;re using OpenShift, see Redis Enterprise on OpenShift. For details on what is currently supported, see supported distributions.</description></item><item><title>Flexible deployment options</title><link>/kubernetes/deployment/deployment-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/kubernetes/deployment/deployment-options/</guid><description>You can deploy Redis Enterprise for Kubernetes in several different ways depending on your database needs.
Multiple Redis Enterprise database resources (REDB) can be associated with single Redis Enterprise cluster resource (REC) even if they reside in different namespaces.
Note: The Redis Enterprise cluster (REC) custom resource must reside in the same namespace as the Redis Enterprise operator. Single REC and single namespace (one-to-one) The standard and simplest deployment deploys your Redis Enterprise databases (REDB) in the same namespace as the Redis Enterprise cluster (REC).</description></item><item><title>Deploy with kustomize</title><link>/kubernetes/deployment/using-kustomize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/kubernetes/deployment/using-kustomize/</guid><description>Kustomize is a template-free, Kubernetes native way to customize application configuration. Kustomize is available in kubectl by running kubectl apply -k. Kustomize provides a declarative approach to configuration management that you can use with a variety of deployment tools for Kubernetes.
Motivation for use with Redis Enterprise Our operator is deployed onto your target Kubernetes cluster via a bundle or automation tools like OpenShiftâ€™s OLM. The standard practice is to deploy this bundle without any configuration changes as the specific settings are part of how our product has been designed.</description></item><item><title>Use a private registry for container images</title><link>/kubernetes/deployment/container-images/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/kubernetes/deployment/container-images/</guid><description>Redis Enterprise Software, its Kubernetes operator, and the Service Rigger are all distributed as separate container images. Your Kubernetes deployment will pull these images as needed. You can control where these images are pulled from within the operator deployment and also via the Redis Enterprise custom resources.
In general, images for deployments that do not have a registry domain name (e.g., gcr.io or localhost:5000) are pulled from the default registry associated with the Kubernetes cluster.</description></item></channel></rss>