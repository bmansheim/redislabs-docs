<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Embeds on Redis Documentation Center</title><link>/embeds/</link><description>Recent content in Embeds on Redis Documentation Center</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/embeds/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>/embeds/backup-locations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/embeds/backup-locations/</guid><description>FTP server Before you choose to backup to an FTP server, make sure that:
The RS cluster has network connectivity to the FTP server. The user that you specify in the FTP server location has read and write priviledges. To backup to an FTP server, enter the FTP server location in the format:
ftp://user:password@host&amp;lt;:custom_port&amp;gt;/path/ For example: ftp://username:password@10.1.1.1/home/backups/
SFTP server Before you choose to backup to an SFTP server, make sure that:</description></item><item><title/><link>/embeds/cluster-dns-embed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/embeds/cluster-dns-embed/</guid><description>By default, Redis Enterprise Software deployments use DNS to communicate between nodes. You can also use the Discovery Service, which uses IP addresses to connect and complies with the Redis Sentinel API supported by open source Redis.
Each node in a Redis Enterprise cluster includes a small DNS server to manage internal functions, such as high availability, automatic failover, automatic migration, and so on. Nodes should only run the DNS server included with the software.</description></item><item><title/><link>/embeds/cluster-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/embeds/cluster-setup/</guid><description>In the web browser on the host machine, go to https://localhost:8443 to see the Redis Enterprise Software admin console.
Note: If your browser displays a certificate error, you can safely proceed. If the server does not show the login screen, try again after a few minutes. Choose Setup to begin configuring the node.
In the Node Configuration settings, enter a cluster FQDN such as `cluster.local&amp;rsquo; and then select Next.</description></item><item><title/><link>/embeds/compatible-with-oss/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/embeds/compatible-with-oss/</guid><description>Yes we are. Not only are we are the home of Redis, but most of the core engineers on open source Redis also work here. We contribute extensively to the open source Redis project. As a rule, we adhere to the open source’s specifications and make every effort to update our service with its latest versions.
That said, the following Redis features are not applicable in the context of our service:</description></item><item><title/><link>/embeds/create-db/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/embeds/create-db/</guid><description>In your web browser, open the admin console of the cluster that you want to connect to in order to create the { { &amp;lt; field &amp;ldquo;db_type&amp;rdquo; &amp;gt; } }. By default, the address is: `https://&amp;lt;RS_address&amp;gt;:8443` In databases, click .
If you do not have any databases on the node, you are prompted to create a database.</description></item><item><title/><link>/embeds/create-subscription-next-steps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/embeds/create-subscription-next-steps/</guid><description>The subscription shows a &amp;ldquo;Pending&amp;rdquo; status and takes approximately 10 to 15 minutes to provision. You receive an email when your subscription is ready to use.
Next steps We recommend that you set up VPC peering with your application VPC. VPC peering lets you route traffic between your VPCs using private IP addresses for improved security and performance.
You can also edit these subscription settings after the subscription is created:</description></item><item><title/><link>/embeds/discovery-clients/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/embeds/discovery-clients/</guid><description>Redis-py (Python redis client) HiRedis (C redis client) Jedis (Java redis client) Ioredis (NodeJS redis client) If you need to use another client, consider using Sentinel Tunnel to discover the current Redis master with Sentinel and create a TCP tunnel between a local port on the client and the master.</description></item><item><title/><link>/embeds/docker-memory-limitation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/embeds/docker-memory-limitation/</guid><description>If you cannot activate the database because of a memory limitation, make sure that Docker has enough memory allocated in the Docker Settings.</description></item><item><title/><link>/embeds/hardware-requirements-embed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/embeds/hardware-requirements-embed/</guid><description>The hardware requirements for Redis Enterprise Software are different for development and production environments.
In a development environment, you can test your application with a live database.
If you want to test your application under production conditions, use the production environment requirements.
In a production environment you must have enough resources to handle the load on the database and recover from failures.
Development environment You can build your development environment with non-production hardware, such as a laptop, desktop, or small VM or instance, and with these hardware requirements:</description></item><item><title/><link>/embeds/how-many-databases-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/embeds/how-many-databases-cloud/</guid><description>Each subscription plan (except for our free plans) enables multiple dedicated databases, each running in a dedicated process and in a non-blocking manner.
A 1GB plan for example, enables 16 dedicated databases.</description></item><item><title/><link>/embeds/how-many-databases-software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/embeds/how-many-databases-software/</guid><description>The number of databases is unlimited. The limiting factor is the available memory in the cluster, and the number of shards in the subscription.
Note that the impact of the specific database configuration on the number of shards it consumes. For example:
Enabling database replication, without enabling database clustering, creates two shards: a master shard and a replica shard. Enabling database clustering creates as many database shards as you configure. Enabling both database replication and database clustering creates double the number of database shards you configure.</description></item><item><title/><link>/embeds/oss-cluster-api-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/embeds/oss-cluster-api-intro/</guid><description>Redis OSS Cluster API reduces access times and latency with near-linear scalability. The Redis OSS Cluster API provides a simple mechanism for Redis clients to know the cluster topology.
Clients must first connect to the master node to get the cluster topology, and then they connect directly to the Redis proxy on each node that hosts a master shard.
Note: You must use a client that supports the OSS cluster API to connect to a database that has the OSS cluster API enabled.</description></item><item><title/><link>/embeds/port-configurations-embed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/embeds/port-configurations-embed/</guid><description>To make sure that Redis Enterprise Software (RS) servers can pass necessary communications between them, we recommend that all RS servers have all of the ports listed here open between them.
By default, the cluster assigns ports in the range of 10,000 - 19,999 to database endpoints. If you assign a specific port for a database when you create it, even outside of this range, the cluster only verifies that the assigned port is not already in use.</description></item><item><title/><link>/embeds/reset-password/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/embeds/reset-password/</guid><description>To reset a user password from the CLI, run:
rladmin cluster reset_password &amp;lt;username&amp;gt;
You are asked to enter and confirm the new password.</description></item><item><title/><link>/embeds/sample/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/embeds/sample/</guid><description> heading 1 heading 2 heading 3 cell 1x1 cell 1x2 cell 1x3 cell 2x1 cell 2x2 cell 2x3 Example Shortcode Inside an embedded markdown file. Tip - Another example of shortcode inside an embedded file.</description></item><item><title/><link>/embeds/shard-placement-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/embeds/shard-placement-intro/</guid><description>In addition to the shard placement policy, considerations that determine shard placement are:
Separation of master and replica shards Available persistence and Redis on Flash (RoF) storage Rack awareness Memory available to host the database when fully populated The shard placement policies are:
dense - Place as many shards as possible on the smallest number of nodes to reduce the latency between the proxy and the database shards; Recommended for Redis on RAM databases to optimize memory resources sparse - Spread the shards across as many nodes in the cluster as possible to spread the traffic across cluster nodes; Recommended for Redis on Flash databases to optimize disk resources When you create a Redis Enterprise Software cluster, the default shard placement policy (dense) is assigned to all databases that you create on the cluster.</description></item><item><title/><link>/embeds/supported-platforms-embed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/embeds/supported-platforms-embed/</guid><description>Redis Enterprise Software is supported on several operating systems, cloud environments, and virtual environments.
System requirements Make sure your system meets these requirements:
Only 64-bit operating systems are supported. You must install Redis Enterprise Software directly on the host, not through system cloning. You must install on a clean host with no other applications running so that all RAM is allocated to the operating system and Redis Enterprise Software only. Linux distributions must be installed with at least &amp;ldquo;Minimal Install&amp;rdquo; configuration.</description></item><item><title/><link>/embeds/tls-configuration-procedure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/embeds/tls-configuration-procedure/</guid><description>To encrypt Replica Of synchronization traffic, you must also configure encryption for the replica database (the destination).
Encrypt source synchronization traffic To enable TLS for Replica Of communication only on the source database:
In databases, either:
Create a new database. Select a database to configure and then select Edit. Enable TLS.
Select the communication that you want to secure:
For a new database - Require TLS for Replica Of communications only is selected by default.</description></item><item><title/><link>/embeds/tryout-redisai/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/embeds/tryout-redisai/</guid><description>Getting started You can connect to RedisAI using any Redis client. Better yet, some languages already have client implementations for RedisAI - the list can be found at the Clients page. RedisAI clients wrap the core API and simplify the interaction with the module.
We&amp;rsquo;ll begin by using the official redis-cli Redis client. If you have it locally installed feel free to use that, but it is also available from the container:</description></item><item><title/><link>/embeds/tryout-redisbloom/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/embeds/tryout-redisbloom/</guid><description>Trying it out You can play with it a bit using redis-cli:
Connect to redis.
$ redis-cli -p 12543 127.0.0.1:12543&amp;gt; Run these commands:
127.0.0.1:12543&amp;gt; BF.ADD bloom kirk 1) (integer) 1 127.0.0.1:12543&amp;gt; BF.ADD bloom redis 1) (integer) 1 127.0.0.1:12543&amp;gt; BF.EXISTS bloom kirk (integer) 1 127.0.0.1:12543&amp;gt; BF.EXISTS bloom redis (integer) 1 127.0.0.1:12543&amp;gt; BF.EXISTS bloom nonexist (integer) 0 127.0.0.1:12543&amp;gt; BF.EXISTS bloom que? (integer) 0 127.0.0.1:12543&amp;gt; 127.0.0.1:12543&amp;gt; BF.MADD bloom elem1 elem2 elem3 1) (integer) 1 2) (integer) 1 3) (integer) 1 127.</description></item><item><title/><link>/embeds/tryout-redisearch-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/embeds/tryout-redisearch-2/</guid><description>Creating indexes Let&amp;rsquo;s create a new index called &amp;ldquo;database_idx&amp;rdquo;. When you define the index, you must pass in the structure of the data you are adding to the index. In this example, we have four fields: title (TEXT), body (TEXT), url (TEXT) and visits (NUMERIC), with the title field having a higher weight than the others (5.0).
Connect to Redis (replace 12543 with the port number your RediSearch is running on).</description></item><item><title/><link>/embeds/tryout-redisgraph/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/embeds/tryout-redisgraph/</guid><description>Give it a try After you load RedisGraph, you can interact with it using redis-cli.
Here we&amp;rsquo;ll quickly create a small graph representing a subset of motorcycle riders and teams taking part in the MotoGP league. Once created, we&amp;rsquo;ll start querying our data.
With redis-cli Connect to redis.
$ redis-cli -p 12543 127.0.0.1:12543&amp;gt; Run these commands:
127.0.0.1:12543&amp;gt; GRAPH.QUERY MotoGP &amp;#34;CREATE (:Rider {name:&amp;#39;Valentino Rossi&amp;#39;})-[:rides]-&amp;gt;(:Team {name:&amp;#39;Yamaha&amp;#39;}), (:Rider {name:&amp;#39;Dani Pedrosa&amp;#39;})-[:rides]-&amp;gt;(:Team {name:&amp;#39;Honda&amp;#39;}), (:Rider {name:&amp;#39;Andrea Dovizioso&amp;#39;})-[:rides]-&amp;gt;(:Team {name:&amp;#39;Ducati&amp;#39;})&amp;#34; 1) (empty list or set) 2) 1) Labels added: 2 2) Nodes created: 6 3) Properties set: 6 4) Relationships created: 3 5) &amp;#34;Query internal execution time: 0.</description></item><item><title/><link>/embeds/tryout-redistimeseries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/embeds/tryout-redistimeseries/</guid><description>Quick start with redis-cli After you set up RedisTimeSeries, you can interact with it using redis-cli.
Here we&amp;rsquo;ll create a time series representing sensor temperature measurements. After you create the time series, you can send temperature measurements. Then you can query the data for a time range on some aggregation rule.
With redis-cli Connect to redis.
$ redis-cli -p 12543 127.0.0.1:12543&amp;gt; Run these commands:
127.0.0.1:12543&amp;gt; TS.CREATE temperature RETENTION 60 LABELS sensor_id 2 area_id 32 OK 127.</description></item><item><title/><link>/embeds/tryout-redsigears/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/embeds/tryout-redsigears/</guid><description/></item><item><title/><link>/embeds/what-is-redis-enterprise/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/embeds/what-is-redis-enterprise/</guid><description>Redis has enhanced open source Redis with a technology layer that encapsulates open source Redis, while fully supporting all its commands, data structures and modules. It adds exceptional flexibility, stable high performance and unmatched resilience, as well as multiple deployment choices (public and private clouds, on-premises, hybrid, RAM-Flash combination), topology (active-active, active-passive, active-replica) and support for very large dataset sizes. This enhanced and exponentially more powerful database platform is Redis Enterprise.</description></item></channel></rss>