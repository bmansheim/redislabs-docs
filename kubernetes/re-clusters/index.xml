<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Redis Enterprise clusters (REC) on Redis Documentation Center</title><link>/kubernetes/re-clusters/</link><description>Recent content in Redis Enterprise clusters (REC) on Redis Documentation Center</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/kubernetes/re-clusters/index.xml" rel="self" type="application/rss+xml"/><item><title>Connect to the admin console</title><link>/kubernetes/re-clusters/connect-to-admin-console/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/kubernetes/re-clusters/connect-to-admin-console/</guid><description>The username and password for the Redis Enterprise Software admin console are stored in a Kubernetes secret. After retrieving your credentials, you can use port forwarding to connect to the admin console.
Note: There are several methods for accessing the admin console. Port forwarding is the simplest, but not the most efficient method for long-term use. You could also use a load balancer service or ingress. Switch to the namespace with your Redis Enterprise cluster (REC).</description></item><item><title>Create Active-Active databases on Kubernetes</title><link>/kubernetes/re-clusters/create-aa-database/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/kubernetes/re-clusters/create-aa-database/</guid><description>On Kubernetes, Redis Enterprise Active-Active databases provide read and write access to the same dataset from different Kubernetes clusters. For more general information about Active-Active, see the Redis Enterprise Software docs.
Creating an Active-Active database requires routing network access between two Redis Enterprise clusters residing in two different Kubernetes clusters. Without the proper access configured for each cluster, syncing between the databases instances will fail.
This process consists of:
Documenting values to be used in later steps.</description></item><item><title>Use Redis on Flash on Kubernetes</title><link>/kubernetes/re-clusters/redis-on-flash/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/kubernetes/re-clusters/redis-on-flash/</guid><description>Prerequisites Redis Enterprise Software for Kubernetes supports using Redis on Flash, which extends your node memory to use both RAM and flash storage. SSDs (solid state drives) can store infrequently used (warm) values while your keys and frequently used (hot) values are still stored in RAM. This improves performance and lowers costs for large datasets.
Note: NVMe (non-volatile memory express) SSDs are strongly recommended to achieve the best performance. Before creating your Redis clusters or databases, these SSDs must be:</description></item><item><title>Manage databases in multiple namespaces</title><link>/kubernetes/re-clusters/multi-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/kubernetes/re-clusters/multi-namespace/</guid><description>Multiple Redis Enterprise database resources (REDBs) can be associated with a single Redis Enterprise cluster resource (REC) even if they reside in different namespaces.
To learn more about designing a multi-namespace Redis Enterprise cluster, see flexible deployment options.
Prerequisites Before configuring a multi-namespace deployment, you must have a running Redis Enterprise cluster (REC). See more information in the deployment section.
Create role and role binding for managed namespaces Both the operator and the RedisEnterpriseCluster (REC) resource need access to each namespace the REC will manage.</description></item><item><title>Upgrade a Redis Enterprise cluster (REC) on Kubernetes</title><link>/kubernetes/re-clusters/upgrade-redis-cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/kubernetes/re-clusters/upgrade-redis-cluster/</guid><description>Redis implements rolling updates for software upgrades in Kubernetes deployments. The upgrade process consists of two steps:
Upgrade the Redis Enterprise operator Upgrade the Redis Enterprise cluster (REC) Warning - When upgrading existing Redis Enterprise clusters running on RHEL7-based images, make sure to select a RHEL7-based image for the new version. See release notes for more info. Upgrade the operator Download the bundle Make sure you pull the correct version of the bundle.</description></item><item><title>Recover a Redis Enterprise cluster on Kubernetes</title><link>/kubernetes/re-clusters/cluster-recovery/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/kubernetes/re-clusters/cluster-recovery/</guid><description>When a Redis Enterprise cluster loses contact with more than half of its nodes either because of failed nodes or network split, the cluster stops responding to client connections. When this happens, you must recover the cluster to restore the connections.
You can also perform cluster recovery to reset cluster nodes, to troubleshoot issues, or in a case of active/passive failover.
The Redis Enterprise for Kubernetes automates these recovery steps:</description></item><item><title>Delete custom resources</title><link>/kubernetes/re-clusters/delete_custom_resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/kubernetes/re-clusters/delete_custom_resources/</guid><description>Delete a database (REDB) To delete a database managed by the Redis Enterprise Kubernetes operator, run kubectl delete redb &amp;lt;your-db-name&amp;gt; from your K8s cluster.
When you delete a database, your data and the REDB custom resource are also deleted.
Delete a Redis Enterprise cluster (REC) To delete a Redis Enterprise cluster managed by the operator:
Delete all the databases in your cluster.
Run kubectl delete rec &amp;lt;your-rec-name&amp;gt; from your K8s cluster.</description></item><item><title>Connect the Prometheus operator to Redis Enterprise for Kubernetes</title><link>/kubernetes/re-clusters/connect-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/kubernetes/re-clusters/connect-prometheus-operator/</guid><description>To collect metrics data from your databases and Redis Enterprise cluster (REC), you can connect your Prometheus server to an endpoint exposed on your REC. Redis Enterprise for Kubernetes creates a dedicated service to expose the prometheus port (8070) for data collection. A custom resource called ServiceMonitor allows the Prometheus operator to connect to this port and collect data from Redis Enterprise.
Prerequisites Before connecting Redis Enterprise to Prometheus on your Kubernetes cluster, make sure you&amp;rsquo;ve done the following:</description></item></channel></rss>