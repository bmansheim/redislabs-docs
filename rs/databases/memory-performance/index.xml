<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Memory and performance on Redis Documentation Center</title><link>/rs/databases/memory-performance/</link><description>Recent content in Memory and performance on Redis Documentation Center</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/rs/databases/memory-performance/index.xml" rel="self" type="application/rss+xml"/><item><title>Eviction policy</title><link>/rs/databases/memory-performance/eviction-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rs/databases/memory-performance/eviction-policy/</guid><description>The eviction policy determines what happens when a database reaches its memory limit.
To make room for new data, older data is evicted (removed) according to the selected policy.
To prevent this from happening, make sure your database is large enough to hold all desired keys.
EvictionÂ Policy Description noeviction New values aren&amp;rsquo;t saved when memory limit is reachedWhen a database uses replication, this applies to the primary database allkeys-lru Keeps most recently used keys; removes least recently used (LRU) keys allkeys-lfu Keeps frequently used keys; removes least frequently used (LFU) keys allkeys-random Randomly removes keys volatile-lru Removes least recently used keys with expire field set to true volatile-lfu Removes least frequently used keys with expire field set to true volatile-random Randomly removes keys with expire field set to true volatile-ttl Removes least frequently used keys with expire field set to true and the shortest remaining time-to-live (TTL) value Eviction policy defaults volatile-lru is the default eviction policy for most databases.</description></item><item><title>Database memory limits</title><link>/rs/databases/memory-performance/memory-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rs/databases/memory-performance/memory-limit/</guid><description>When you set a database&amp;rsquo;s memory limit, you define the maximum size the database can reach in the cluster, across all database replicas and shards, including both primary and replica shards.
If the total size of the database in the cluster reaches the memory limit, the data eviction policy is applied.
Factors for sizing Factors to consider when sizing your database:
dataset size: you want your limit to be above your dataset size to leave room for overhead.</description></item><item><title>Shard placement policy</title><link>/rs/databases/memory-performance/shard-placement-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rs/databases/memory-performance/shard-placement-policy/</guid><description>In Redis Enterprise Software, the location of master and replica shards on the cluster nodes can impact the database and node performance. Master shards and their corresponding replica shards are always placed on separate nodes for data resiliency. The shard placement policy helps to maintain optimal performance and resiliency.
In addition to the shard placement policy, considerations that determine shard placement are:
Separation of master and replica shards Available persistence and Redis on Flash (RoF) storage Rack awareness Memory available to host the database when fully populated The shard placement policies are:</description></item></channel></rss>