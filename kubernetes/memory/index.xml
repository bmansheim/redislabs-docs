<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Manage memory resources on Redis Documentation Center</title><link>/kubernetes/memory/</link><description>Recent content in Manage memory resources on Redis Documentation Center</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/kubernetes/memory/index.xml" rel="self" type="application/rss+xml"/><item><title>Use persistent volumes in Redis Enterprise clusters</title><link>/kubernetes/memory/persistent-volumes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/kubernetes/memory/persistent-volumes/</guid><description>To deploy a Redis Enterprise cluster with Redis Enterprise operator the spec should include a persistentSpec section, in the redis-enterprise-cluster.yaml file:
spec: nodes: 3 persistentSpec: enabled: true storageClassName: &amp;quot;standard&amp;quot; volumeSize: &amp;quot;23Gi‚Äù #optional Persistence storage is a requirement for this deployment type.
Note: For production deployments of Redis Enterprise Cluster on Kubenetes, the Redis Enterprise Cluster (REC) must be deployed with persistence enabled. The REC deployment files in the Kubernetes documentation contain this declaration by default.</description></item><item><title>Size and scale a Redis Enterprise cluster deployment on Kubernetes</title><link>/kubernetes/memory/sizing-on-kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/kubernetes/memory/sizing-on-kubernetes/</guid><description>The following article reviews the mechanism and methods available for sizing and scaling a Redis Enterprise cluster deployment.
For minimum and recommended sizing, always follow the sizing guidelines detailed in the Redis Enterprise hardware requirements.
Sizing and scaling cluster nodes Setting the number of cluster nodes Define the number of cluster nodes in redis-enterprise-cluster.yaml file.
spec: nodes: 3 The number of nodes in the cluster must be an uneven number equal to or greater than 3.</description></item><item><title>Control node selection</title><link>/kubernetes/memory/node-selection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/kubernetes/memory/node-selection/</guid><description>Many Kubernetes cluster deployments have different kinds of nodes that have different CPU and memory resources available for scheduling cluster workloads. Redis Enterprise for Kubernetes has various abilities to control the scheduling Redis Enterprise cluster node pods through properties specified in the Redis Enterprise cluster custom resource definition (CRD).
A Redis Enterprise cluster (REC) is deployed as a StatefulSet which manages the Redis Enterprise cluster node pods. The scheduler chooses a node to deploy a new Redis Enterprise cluster node pod on when:</description></item><item><title>Manage pod stability</title><link>/kubernetes/memory/pod-stability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/kubernetes/memory/pod-stability/</guid><description>Kubernetes clusters manage the allocation of system resources and can evict pods to release system resources. Here are some ways that you can configure the Redis Enterprise node pods to maintain pod stability:
Guaranteed quality of service A running pod has a quality of service measure assigned to it that is one of three quality of service classes: Guaranteed, Burstable, and Best Effort. You can assure the Guaranteed class is assigned to the Redis Enterprise node pods by following the right guidelines.</description></item></channel></rss>