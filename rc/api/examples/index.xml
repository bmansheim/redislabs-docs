<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>REST API Examples on Redis Documentation Center</title><link>/rc/api/examples/</link><description>Recent content in REST API Examples on Redis Documentation Center</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/rc/api/examples/index.xml" rel="self" type="application/rss+xml"/><item><title>Create and manage subscriptions</title><link>/rc/api/examples/manage-subscriptions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rc/api/examples/manage-subscriptions/</guid><description>The Redis Enterprise Cloud REST API lets you create and manage a subscription.
Create a subscription Use POST /v1/subscriptions to create a subscription.
POST &amp;#34;https://[host]/v1/subscriptions&amp;#34; { &amp;#34;name&amp;#34;: &amp;#34;Basic subscription example&amp;#34;, &amp;#34;paymentMethodId&amp;#34;: &amp;lt;payment_id&amp;gt;, &amp;#34;cloudProviders&amp;#34;: [ { &amp;#34;cloudAccountId&amp;#34;: &amp;lt;account_id&amp;gt;, &amp;#34;regions&amp;#34;: [ { &amp;#34;region&amp;#34;: &amp;#34;us-east-1&amp;#34;, &amp;#34;networking&amp;#34;: { &amp;#34;deploymentCIDR&amp;#34;: &amp;#34;10.0.0.0/24&amp;#34; } } ] } ], &amp;#34;databases&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;Redis-database-example&amp;#34;, &amp;#34;memoryLimitInGb&amp;#34;: 1.1 } ] } Modify the following parameters in the sample JSON document to create a subscription on your own account:</description></item><item><title>Create and manage databases</title><link>/rc/api/examples/create-database/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rc/api/examples/create-database/</guid><description>You can use the Redis Enterprise Cloud REST API to create databases.
These examples use the cURL utility; you can use any REST client to work with the Redis Cloud REST API.
Create a database To create a database, use POST /subscriptions/{subscription-id}/databases
The database is created in an existing or a newly created subscription.
When a subscription is created, it is created with at least one database.
You can add databases to the subscription; you can also update or delete existing databases.</description></item><item><title>Update databases</title><link>/rc/api/examples/update-database/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rc/api/examples/update-database/</guid><description>The API operation that updates an existing database is: PUT /subscriptions/{subscription-id}/databases/{database-id}
This API operation uses the same provisioning lifecycle as the create database operation.
Database update request JSON body The primary component of a database update request is the JSON request body that contains the details of the requested database changes.
You can see the complete set of JSON elements accepted by the database update API operation in the Swagger UI.</description></item><item><title>Database backup and import</title><link>/rc/api/examples/back-up-and-import-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rc/api/examples/back-up-and-import-data/</guid><description>Back up a database When you create or update a database in a Flexible or Annual account, you can specify the (optional) periodicBackupPath parameter with a backup path. This parameter enables periodic and on-demand backup operations for the specified database.
The API operation for on-demand backups is POST /subscriptions/{subscriptionId}/databases/{databaseId}/backup. On-demand database backup is an asynchronous operation.
POST &amp;#34;https://[host]/v1/subscriptions/&amp;lt;subscriptionId&amp;gt;/databases/&amp;lt;databaseId&amp;gt;/backup&amp;#34; The backup database API does not require a body. Instead, the periodicBackupPath must be set to a valid path with available storage capacity to store the backup files for the specific database.</description></item><item><title>Estimate cost</title><link>/rc/api/examples/dryrun-cost-estimates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rc/api/examples/dryrun-cost-estimates/</guid><description>When you change your subscriptions and databases, you also change the cost of your deployment. With a dry-run request, you can evaluate the impact and obtain a new cost estimate before you deploy these changes:
Create subscription Create a database Update a database Defining a dry-run request API operations that support dry-run requests accept the dryRun boolean parameter in the JSON request body.
For example, the JSON body of a create subscription request body can include the dryRun=true parameter:</description></item><item><title>Audit using Service Log</title><link>/rc/api/examples/audit-system-logs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rc/api/examples/audit-system-logs/</guid><description>Service logs collect and report actions performed on various entities in your Redis Enterprise Cloud subscription. These entities include the account itself, users, API Keys, subscriptions, databases, accounts, payment methods, and more. For each entity, various lifecycle events are logged in the system log.
To view the log, sign in to the Redis Cloud admin console and then select Logs from the main menu.
To learn more, see System logs.</description></item><item><title>View account information</title><link>/rc/api/examples/view-account-information/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rc/api/examples/view-account-information/</guid><description>The root API operation returns information about the current account, user, and API Key (as identified by the set of API Keys provided in the API request).
GET &amp;#34;https://[host]/v1/subscriptions/&amp;lt;subscription_id&amp;gt;/databases/&amp;lt;database_id&amp;gt;/metrics?metricSpan=1hour&amp;#34; Here is an example of the API operation response:
{ &amp;#34;account&amp;#34;: { &amp;#34;id&amp;#34;: 654321, &amp;#34;name&amp;#34;: &amp;#34;Redis&amp;#34;, &amp;#34;createdTimestamp&amp;#34;: &amp;#34;2018-12-23T15:15:31Z&amp;#34;, &amp;#34;updatedTimestamp&amp;#34;: &amp;#34;2019-07-04T12:22:04Z&amp;#34;, &amp;#34;key&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;jay-doe-api-key-6&amp;#34;, &amp;#34;accountId&amp;#34;: 654321, &amp;#34;accountName&amp;#34;: &amp;#34;Redis account for Jay Doe&amp;#34;, &amp;#34;allowedSourceIps&amp;#34;: [ &amp;#34;192.0.2.0/24&amp;#34; ], &amp;#34;createdTimestamp&amp;#34;: &amp;#34;2019-06-06T07:41:14Z&amp;#34;, &amp;#34;owner&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;Jay Doe&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;jay.</description></item><item><title>Create and manage cloud accounts</title><link>/rc/api/examples/manage-cloud-accounts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rc/api/examples/manage-cloud-accounts/</guid><description>You can use the Redis Enterprise Cloud REST API to create and manage cloud accounts.
These examples use the cURL utility; you can use any REST client to work with the Redis Cloud REST API.
Create a cloud account To create a cloud account, use the POST /v1/cloud-accounts endpoint.
The created cloud account is defined by a JSON document that is sent as the body of the request.
POST https://[host]/v1/cloud-accounts { &amp;#34;accessKeyId&amp;#34;: &amp;#34;$ACCESS_KEY_ID&amp;#34;, &amp;#34;accessSecretKey&amp;#34;: &amp;#34;$ACCESS_SECRET_KEY&amp;#34;, &amp;#34;consolePassword&amp;#34;: &amp;#34;$CONSOLE_PASSWORD&amp;#34;, &amp;#34;consoleUsername&amp;#34;: &amp;#34;$CONSOLE_USERNAME&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;My new Cloud Account&amp;#34;, &amp;#34;provider&amp;#34;: &amp;#34;AWS&amp;#34;, &amp;#34;signInLoginUrl&amp;#34;: &amp;#34;https://$AWS_ACCOUNT_IDENTIFIER.</description></item></channel></rss>