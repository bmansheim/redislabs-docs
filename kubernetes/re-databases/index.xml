<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Redis Enterprise databases (REDB) on Redis Documentation Center</title><link>/kubernetes/re-databases/</link><description>Recent content in Redis Enterprise databases (REDB) on Redis Documentation Center</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/kubernetes/re-databases/index.xml" rel="self" type="application/rss+xml"/><item><title>Manage Redis Enterprise databases for Kubernetes</title><link>/kubernetes/re-databases/db-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/kubernetes/re-databases/db-controller/</guid><description>Redis Enterprise database (REDB) lifecycle A Redis Enterprise database (REDB) is created with a custom resource file. The custom resource defines the size, name, and other specifications for the REDB. The database is created when you apply the custom resource file.
The database controller in Redis Enterprise for Kubernetes:
Discovers the custom resource Makes sure the REDB is created in the same namespace as the Redis Enterprise cluster (REC) Maintains consistency between the custom resource and the REDB The database controller recognizes the new custom resource and validates the specification.</description></item><item><title>Establish external routing with an ingress controller</title><link>/kubernetes/re-databases/set-up-ingress-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/kubernetes/re-databases/set-up-ingress-controller/</guid><description>Every time a Redis Enterprise database (REDB) is created with the Redis Enterprise operator, a service is created that allows requests to be routed to that database. Redis Enterprise supports three types of services for accessing databases: ClusterIP, headless, or LoadBalancer.
By default, REDB creates a ClusterIP type service, which exposes a cluster-internal IP and can only be accessed from within the K8s cluster. For requests to be routed to the REDB from outside the K8s cluster, you need an ingress controller.</description></item><item><title>Use OpenShift routes for external database access</title><link>/kubernetes/re-databases/routes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/kubernetes/re-databases/routes/</guid><description>Every time the Redis Enterprise operator creates a Redis Enterprise database (REDB), it creates a service that allows requests to be routed to that database. Redis Enterprise supports three types of services for accessing databases: ClusterIP, headless, or LoadBalancer.
By default, REDB creates a ClusterIP type service, which exposes a cluster-internal IP and can only be accessed from within the cluster. OpenShift routes allow requests to be routed to the REDB from outside the cluster.</description></item><item><title>Configure Istio for external routing</title><link>/kubernetes/re-databases/ingress_routing_with_istio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/kubernetes/re-databases/ingress_routing_with_istio/</guid><description>Redis Enterprise for Kubernetes version 6.2.8-11 introduces the ability to use an Istio ingress gateway as an alternative to NGINX or HaProxy ingress controllers.
Istio can also understand ingress resources, but using that mechanism takes away the advantages and options that the native Istio resources provide. Istio offers its own configuration methods using custom resources.
To configure Istio to work with the Redis Kubernetes operator, we will use two custom resources: a Gateway and a VirtualService.</description></item><item><title>Create replica databases on Kubernetes</title><link>/kubernetes/re-databases/replica-redb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/kubernetes/re-databases/replica-redb/</guid><description>You can configure a replica of a database by creating an item in the replicaSources section of the Redis Enterprise database specification. The value of replicaSourceType must be &amp;lsquo;SECRET&amp;rsquo;; replicaSourceName must be the name of a secret that contains the replica source url.
A secret must be created using a stringData section containing the replica source URL as follows:
apiVersion: v1 kind: Secret metadata: name: my-replica-source stringData: url: replica-source-url-goes-here The replica source URL can be retrieved by going to &amp;ldquo;UI &amp;gt; database &amp;gt; configuration &amp;gt; Press the button Get Replica of source URL&amp;rdquo; in the administrative UI.</description></item></channel></rss>