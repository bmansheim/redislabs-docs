<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Configure databases on Redis Documentation Center</title><link>/rc/databases/configuration/</link><description>Recent content in Configure databases on Redis Documentation Center</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/rc/databases/configuration/index.xml" rel="self" type="application/rss+xml"/><item><title>Clustering Redis Databases</title><link>/rc/databases/configuration/clustering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rc/databases/configuration/clustering/</guid><description>For very large databases, Redis Enterprise Cloud distributes database data to different cloud instances. For example:
When data grows beyond the the RAM resources of a single server.
Multiple shards should be used when data grows to 25 GB (50 GB for Redis on Flash) to create multiple shards.
The operations performed against the database are CPU intensive enough to degrade performance.
Clustering distributes operational load, whether to instances on the same server or across multiple servers.</description></item><item><title>Data eviction policies</title><link>/rc/databases/configuration/data-eviction-policies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rc/databases/configuration/data-eviction-policies/</guid><description>The data eviction policy of a database controls what happens when new data exceeds the memory size of a database. Typically, such situations require evicting (or deleting) data previously added to the database.
To control this behavior, change the Data eviction policy setting for a database.
Available policies For each database, you can choose from these data eviction policies:
AvailableÂ policies Description allkeys-lru Keeps most recently used keys; removes least recently used (LRU) keys allkeys-lfu Keeps frequently used keys; removes least frequently used (LFU) keys allkeys-random Randomly removes keys volatile-lru Removes least recently used keys with expire field set to true (Default) volatile-lfu Removes least frequently used keys with expire field set to true volatile-random Randomly removes keys with expire field set to true volatile-ttl Removes least frequently used keys with expire field set to true and the shortest remaining time-to-live (TTL) value no eviction New values aren&amp;rsquo;t saved when memory limit is reachedWhen a database uses replication, this applies to the primary database Redis Cloud supports Redis on Flash (RoF) to prevent data eviction but maintain high performance.</description></item><item><title>Data persistence</title><link>/rc/databases/configuration/data-persistence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rc/databases/configuration/data-persistence/</guid><description>Redis Enterprise Cloud can persist data to enable recovery in the event of memory loss or other catastrophic failure. When you enable data persistence, in-memory data is copied to persistent storage attached to the underlying cloud instance.
Persistence options Data can be persisted in one of two ways:
An Append-Only File (AOF) maintains a record (sometimes called a redo log or journal) of write operations. This allows the data to be restored by using the record to reconstruct the database up to the point of failure.</description></item><item><title>High availability and replication</title><link>/rc/databases/configuration/high-availability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rc/databases/configuration/high-availability/</guid><description>Database replication helps ensure high availability.
When replication is enabled, your dataset is duplicated to create a replica that is synchronized with the primary dataset.
Replication allows for automatic failover and greater fault tolerance. It can prevent data loss in the event of a hardware or zone failure.
Options and plan support Redis Enterprise Cloud supports three levels of replication:
No replication means that you will have a single copy of your database.</description></item></channel></rss>