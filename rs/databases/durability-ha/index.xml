<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Durability and high availability on Redis Documentation Center</title><link>/rs/databases/durability-ha/</link><description>Recent content in Durability and high availability on Redis Documentation Center</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/rs/databases/durability-ha/index.xml" rel="self" type="application/rss+xml"/><item><title>Database clustering</title><link>/rs/databases/durability-ha/clustering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rs/databases/durability-ha/clustering/</guid><description>Open source Redis is a single-threaded process to provide speed and simplicity. A single Redis process is bound by the CPU core that it is running on and available memory on the server.
Redis Enterprise Software (RS) supports database clustering to allow customers to spread the load of a Redis process over multiple cores and the RAM of multiple servers. A database cluster is a set of Redis processes where each process manages a subset of the database keyspace.</description></item><item><title>Consistency during replication</title><link>/rs/databases/durability-ha/consistency/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rs/databases/durability-ha/consistency/</guid><description>Redis Enterprise SoftwareÂ comes with the ability to replicate data to another database instance for high availability and persist in-memory data on disk permanently for durability. With the WAIT command, you can control the consistency and durability guarantees for the replicated and persisted database.
Any updates that are issued to the database are typically performed with the following flow shown below;
Application issues a write Proxy communicates with the correct primary (also known as master) &amp;ldquo;shard&amp;rdquo; in the system that contains the given key The shard writes the data and sends an acknowledgment to the proxy The proxy sends the acknowledgment back to the application The write is communicated from master to replica Replica acknowledges the write back to the master The write to a replica is persisted to disk The write is acknowledged within the replica With the WAIT command, applications can ask to wait for acknowledgments only after replication or persistence is confirmed on the replica.</description></item><item><title>Discovery service</title><link>/rs/databases/durability-ha/discovery-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rs/databases/durability-ha/discovery-service/</guid><description>The Discovery Service provides an IP-based connection management service used when connecting to Redis Enterprise Software databases. When used in conjunction with Redis Enterprise Software&amp;rsquo;s other high availability features, the Discovery Service assists an application scope with topology changes such as adding, removing of nodes, node failovers and so on. It does this by providing your application with the ability to easily discover which node hosts the database endpoint. The API used for discovery service is compliant with the Redis Sentinel API.</description></item><item><title>Database replication</title><link>/rs/databases/durability-ha/replication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/rs/databases/durability-ha/replication/</guid><description>Database replication helps ensure high availability. When replication is enabled, your dataset is replicated to a replica shard, which is constantly synchronized with the primary shard. If the primary shard fails, an automatic failover happens and the replica shard is promoted. That is, it becomes the new primary shard.
When the old primary shard recovers, it becomes the replica shard of the new primary shard. This auto-failover mechanism guarantees that data is served with minimal interruption.</description></item></channel></rss>